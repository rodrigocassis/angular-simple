const http = require('http');
const { apiPortalDeMassa } = require('./apiPortalDeMassa');

describe('apiPortalDeMassa', () => {
  const mockResponse = { status: 200, data: { message: 'success' } };

  beforeAll(() => {
    jest.spyOn(http, 'Agent').mockImplementation(() => ({
      rejectUnauthorized: false
    }));
  });

  afterAll(() => {
    jest.restoreAllMocks();
  });

  it('deve resolver com a resposta da API', async () => {
    const mockEvent = { /* ... */ };
    const mockResolve = jest.fn();

    const apiRequestMock = jest.spyOn(http, 'request').mockImplementation((options, callback) => {
      callback(mockResponse);
      return { end: jest.fn() };
    });

    await apiPortalDeMassa(mockEvent, mockResolve);

    expect(apiRequestMock).toHaveBeenCalledTimes(1);
    expect(mockResolve).toHaveBeenCalledWith(mockResponse.data);
  });

  it('deve rejeitar em caso de erro na requisição', async () => {
    const mockEvent = { /* ... */ };
    const mockReject = jest.fn();

    const apiRequestMock = jest.spyOn(http, 'request').mockImplementation((options, callback) => {
      callback(new Error('API Error'));
      return { end: jest.fn() };
    });

    await apiPortalDeMassa(mockEvent, undefined, mockReject);

    expect(apiRequestMock).toHaveBeenCalledTimes(1);
    expect(mockReject).toHaveBeenCalledWith('error');
  });
});
